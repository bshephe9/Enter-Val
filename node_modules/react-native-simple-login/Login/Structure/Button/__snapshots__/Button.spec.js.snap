exports[`Button can render correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <TouchableOpacity
    activeOpacity={0.2}
    focusedOpacity={0.7}
    onPress={[Function]}
    style={undefined}>
    <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={undefined}>
        Sample Button
    </Text>
</TouchableOpacity>,
  "nodes": Array [
    <TouchableOpacity
      activeOpacity={0.2}
      focusedOpacity={0.7}
      onPress={[Function]}
      style={undefined}>
      <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={undefined}>
            Sample Button
      </Text>
</TouchableOpacity>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Button
        onPress={[Function]}
        text="Sample Button" />,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "onPress": [Function],
          "text": "Sample Button",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <TouchableOpacity
          activeOpacity={0.2}
          focusedOpacity={0.7}
          onPress={[Function]}
          style={undefined}>
          <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={undefined}>
                    Sample Button
          </Text>
</TouchableOpacity>,
        "_renderedOutput": <TouchableOpacity
          activeOpacity={0.2}
          focusedOpacity={0.7}
          onPress={[Function]}
          style={undefined}>
          <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                    style={undefined}>
                    Sample Button
          </Text>
</TouchableOpacity>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Button
    onPress={[Function]}
    text="Sample Button" />,
}
`;
