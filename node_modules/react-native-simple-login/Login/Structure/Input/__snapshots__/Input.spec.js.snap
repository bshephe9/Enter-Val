exports[`Input can render correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={undefined}>
    <TextInput
        label="Sample Label"
        placeholder="Sample Label"
        underlineColorAndroid="transparent" />
</View>,
  "nodes": Array [
    <View
      style={undefined}>
      <TextInput
            label="Sample Label"
            placeholder="Sample Label"
            underlineColorAndroid="transparent" />
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Input
        label="Sample Label" />,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "label": "Sample Label",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={undefined}>
          <TextInput
                    label="Sample Label"
                    placeholder="Sample Label"
                    underlineColorAndroid="transparent" />
</View>,
        "_renderedOutput": <View
          style={undefined}>
          <TextInput
                    label="Sample Label"
                    placeholder="Sample Label"
                    underlineColorAndroid="transparent" />
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Input
    label="Sample Label" />,
}
`;

exports[`Input only displays the icon when an icon is passed 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={undefined}>
    <Image
        source="fakeIcon"
        style={undefined} />
    <TextInput
        icon="fakeIcon"
        label="Sample Label"
        placeholder="Sample Label"
        underlineColorAndroid="transparent" />
</View>,
  "nodes": Array [
    <View
      style={undefined}>
      <Image
            source="fakeIcon"
            style={undefined} />
      <TextInput
            icon="fakeIcon"
            label="Sample Label"
            placeholder="Sample Label"
            underlineColorAndroid="transparent" />
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Input
        icon="fakeIcon"
        label="Sample Label" />,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "icon": "fakeIcon",
          "label": "Sample Label",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={undefined}>
          <Image
                    source="fakeIcon"
                    style={undefined} />
          <TextInput
                    icon="fakeIcon"
                    label="Sample Label"
                    placeholder="Sample Label"
                    underlineColorAndroid="transparent" />
</View>,
        "_renderedOutput": <View
          style={undefined}>
          <Image
                    source="fakeIcon"
                    style={undefined} />
          <TextInput
                    icon="fakeIcon"
                    label="Sample Label"
                    placeholder="Sample Label"
                    underlineColorAndroid="transparent" />
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Input
    icon="fakeIcon"
    label="Sample Label" />,
}
`;
